version: 2.1
pipelines: true
jobs:
  build:
    machine: true
    working_directory: ~/cumulus-dashboard
    steps:
      - checkout

      - restore_cache:
          keys:
            # Find a cache corresponding to this specific package-lock.json checksum
            # when this file is changed, this key will fail
            - v1.2-npm-deps-{{ checksum "package-lock.json" }}
            # Find the most recently generated cache used from any branch
            - v1.2-npm-deps-

      - run:
          name: Install Dependencies
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v12.18.0
            nvm alias default v12.18.0
            npm install -g npm
            npm ci
            npx cypress verify

      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules
            - ~/.cache
          key: v1.2-npm-deps-{{ checksum "package-lock.json" }}

      - run:
          name: Run Audit-CI
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npm run audit-ci

      - run:
          name: Build Dashboard
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npm run build

      - run:
          name: Run Unit Tests
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npm run test

      - run:
          name: Run End to End Tests
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npm run cypress-ci

      - store_artifacts:
          path: ~/cumulus-dashboard/cypress/screenshots

      - store_artifacts:
          path: ~/cumulus-dashboard/cypress/videos

  deploy:
    machine: true
    working_directory: ~/cumulus-dashboard
    steps:
      - checkout

      - run:
          name: Install AWSCLI
          command: sudo pip install awscli

      - run:
          name: Install Dependencies
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v12.18.0
            nvm alias default v12.18.0
            npm install -g npm
            npm ci --no-optional

      - run:
          # This has to be done in a separate step, like this, because Circle CI
          # will not interpolate values when setting environment variables
          name: Setup Sandbox Environment Variables
          command: |
            echo 'export AWS_ACCESS_KEY_ID="$SANDBOX_ACCESS_KEY_ID"' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY="$SANDBOX_SECRET_ACCESS_KEY"' >> $BASH_ENV

      - run:
          name: Build Sandbox Dist
          command: |
            docker run --rm \
              -v /home/circleci/.cache:/root/.cache \
              -v $(pwd):/home \
              --workdir /home \
              -e APIROOT=${SANDBOX_API} \
              node:12.18.0 \
              npm run build

      - run:
          name: Deploy to S3
          command: |
            aws s3 sync $(pwd)/dist s3://${SANDBOX_DASHBOARD_BUCKET}

      - run:
          # This has to be done in a separate step, like this, because Circle CI
          # will not interpolate values when setting environment variables
          name: Setup Sandbox Environment Variables
          command: |
            echo 'export AWS_ACCESS_KEY_ID="$SANDBOX_ACCESS_KEY_ID"' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY="$SANDBOX_SECRET_ACCESS_KEY"' >> $BASH_ENV

      - run:
          name: Build Sandbox Dist
          command: |
            docker run --rm \
              -v /home/circleci/.cache:/root/.cache \
              -v $(pwd):/home \
              --workdir /home \
              -e AWS_REGION=${SANDBOX_AWS_REGION} \
              -e APIROOT=${SANDBOX_API_ROOT} \
              node:12.18.0 \
              npm run build

      - run:
          name: Deploy to Cumulus Sandbox
          command: |
            aws s3 sync $(pwd)/dist s3://${SANDBOX_DASHBOARD_BUCKET}

      - run:
          # This has to be done in a separate step, like this, because Circle CI
          # will not interpolate values when setting environment variables
          name: Setup SIT Environment Variables
          command: |
            echo 'export AWS_ACCESS_KEY_ID="$SIT_ACCESS_KEY_ID"' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY="$SIT_SECRET_ACCESS_KEY"' >> $BASH_ENV

      - run:
          name: Build SIT Dist
          command: |
            docker run --rm \
              -v /home/circleci/.cache:/root/.cache \
              -v $(pwd):/home \
              --workdir /home \
              -e AWS_REGION=${SIT_AWS_REGION} \
              -e APIROOT=${SIT_API_ROOT} \
              node:12.18.0 \
              npm run build

      - run:
          name: Deploy to Cumulus SIT
          command: |
            aws s3 sync $(pwd)/dist s3://${SIT_DASHBOARD_BUCKET}

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: develop
